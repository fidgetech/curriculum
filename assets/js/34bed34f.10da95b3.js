"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[51760],{15680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>h});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef(function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,h=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return t?a.createElement(h,o(o({ref:n},g),{},{components:t})):a.createElement(h,o({ref:n},g))});function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58673:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(58168),r=(t(96540),t(15680));const i={title:"\ud83d\udcd3 3.0.0.07 Strings, String Concatenation and Interpolation, and Chars",day:"weekend",id:"3-0-0-07-strings-string-concatenation-and-interpolation-and-chars",hide_table_of_contents:!0},o=void 0,s={unversionedId:"c-and-net/lessons-6-18-data-types-and-variables/3-0-0-07-strings-string-concatenation-and-interpolation-and-chars",id:"version-1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-07-strings-string-concatenation-and-interpolation-and-chars",title:"\ud83d\udcd3 3.0.0.07 Strings, String Concatenation and Interpolation, and Chars",description:"Most of the information we worked with in Introduction to Programming, such as strings, integers, variables, methods, and objects function similarly in C#. There are a few differences but you'll catch on quickly!",source:"@site/versioned_docs/version-1.1/3_c-and-net/0_lessons-6-18-data-types-and-variables/AB-3-0-0-07-strings-string-concatenation-and-interpolation-and-chars.md",sourceDirName:"3_c-and-net/0_lessons-6-18-data-types-and-variables",slug:"/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-07-strings-string-concatenation-and-interpolation-and-chars",permalink:"/v1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-07-strings-string-concatenation-and-interpolation-and-chars",draft:!1,tags:[],version:"1.1",frontMatter:{title:"\ud83d\udcd3 3.0.0.07 Strings, String Concatenation and Interpolation, and Chars",day:"weekend",id:"3-0-0-07-strings-string-concatenation-and-interpolation-and-chars",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.0.0.06 Using a C# REPL",permalink:"/v1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-06-using-a-c-repl"},next:{title:"\ud83d\udcd3 3.0.0.08 Integers, Decimals, and Arithmetic",permalink:"/v1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-08-integers-decimals-and-arithmetic"}},l={},c=[{value:"Strings",id:"strings",level:2},{value:"String Concatenation",id:"string-concatenation",level:3},{value:"String Interpolation",id:"string-interpolation",level:3},{value:"Chars",id:"chars",level:2}],g={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Most of the information we worked with in Introduction to Programming, such as strings, integers, variables, methods, and objects function similarly in C#. There are a few differences but you'll catch on quickly! "),(0,r.yg)("p",null,"In this lesson we'll learn about one of the most common data types, the ",(0,r.yg)("strong",{parentName:"p"},"string"),". We'll then learn about string concatenation and interpolation. We'll wrap up by learning about the ",(0,r.yg)("strong",{parentName:"p"},"char")," data type."),(0,r.yg)("h2",{id:"strings"},"Strings"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"C# strings are very similar to JavaScript strings. They're simply a sequence of characters between two quotation marks. ",(0,r.yg)("strong",{parentName:"p"},"Note that strings require quotation marks ",(0,r.yg)("inlineCode",{parentName:"strong"},'"')," specifically \u2014 apostrophes (",(0,r.yg)("inlineCode",{parentName:"strong"},"'"),') are used to define a single character for a data type called "char".')," We'll learn about chars later in this lesson."),(0,r.yg)("p",null,"We can open our REPL with the ",(0,r.yg)("inlineCode",{parentName:"p"},"$ dotnet-script")," command in the Terminal (for Mac) or GitBash (for Windows) to try them out."),(0,r.yg)("p",null,"Once in the REPL we'll type a basic string and hit ",(0,r.yg)("em",{parentName:"p"},"Enter"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> "Hello World"\n')),(0,r.yg)("p",null,"Here is the output:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'"Hello World"\n')),(0,r.yg)("p",null,"Now let's try it with a semicolon."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> "Hello World";\n')),(0,r.yg)("p",null,"Adding a semicolon produces an error:"),(0,r.yg)("code",{style:{color:"red"}},"(1,1): error CS0201: Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement"),(0,r.yg)("p",null,"Remember that C# is a strongly typed language. According to this error, we've already broken one of C#'s strict rules about typing. In this case, the semicolon indicates that C# is expecting a command. In other words, you need to ",(0,r.yg)("em",{parentName:"p"},"do")," something with this string. Let's take the error's advice and make an assignment, which means we'll assign our string to a variable:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> string greeting = "Hello";\n')),(0,r.yg)("p",null,"We're no longer using JavaScript's ",(0,r.yg)("inlineCode",{parentName:"p"},"let")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"const"),". Instead, we're being more specific and declaring that ",(0,r.yg)("inlineCode",{parentName:"p"},"greeting")," is a ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),". We'll need to do this for all variables that we create \u2014 that is, declare its specific data type. "),(0,r.yg)("p",null,"Next, let's call the variable in the REPL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> greeting\n"Hello"\n')),(0,r.yg)("p",null,"Without the semicolon, our REPL can still return the value of the variable. A quick word of warning: don't get used to solving problems in C# by dropping semicolons. This convention helps us evaluate code in the REPL, nothing more."),(0,r.yg)("h3",{id:"string-concatenation"},"String Concatenation"),(0,r.yg)("p",null,"We can also ",(0,r.yg)("strong",{parentName:"p"},"concatenate")," strings together with the ",(0,r.yg)("inlineCode",{parentName:"p"},"+")," operator. As you'll recall, concatenation is the act of making a new string out of multiple smaller strings:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> "Hello" + " " + "World"\n"Hello World"\n')),(0,r.yg)("p",null,"Notice the return value is different from what we originally typed. This is the ",(0,r.yg)("strong",{parentName:"p"},"evaluation")," part of the REPL (Read, Evaluate, Print, Loop) acronym; C# has evaluated the code and returned a result."),(0,r.yg)("p",null,"Here's another example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> "Programming" + " " + "is" + " " "awesome!"\n\n(1,34): error CS1002: ; expected\n')),(0,r.yg)("p",null,"Oops, we got an error this time! The error says a semicolon was expected. Something is wrong with our syntax and the REPL doesn't understand the command."),(0,r.yg)("p",null,"The issue isn't a missing semicolon, however! This error points us to a missing ",(0,r.yg)("inlineCode",{parentName:"p"},"+")," between the space after ",(0,r.yg)("inlineCode",{parentName:"p"},'"is"')," and the string ",(0,r.yg)("inlineCode",{parentName:"p"},'"awesome"'),". Let's fix this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> "Programming" + " " + "is" + " " + "awesome!"\n"Programming is awesome!"\n')),(0,r.yg)("h3",{id:"string-interpolation"},"String Interpolation"),(0,r.yg)("p",null,"String interpolation in C# is the same as template literals in JavaScript, where we can include a variable within a string that we create. Here's an example of what this looks like:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> string greeting1 = "Hello";\n> $"{greeting1} World!"\n"Hello World!"\n')),(0,r.yg)("p",null,"Here's a few rules for using string interpolation:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"We indicate that we are going to use string interpolation by including the ",(0,r.yg)("inlineCode",{parentName:"li"},"$")," sign before the opening quotes of the string, with no space in between."),(0,r.yg)("li",{parentName:"ul"},"We surround the variable we want evaluated and added to our string in curly brackets: ",(0,r.yg)("inlineCode",{parentName:"li"},"{ }"),".")),(0,r.yg)("p",null,"For contrast, here's this same code in JavaScript using a template literal:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'> const greeting1 = "Hello";\n> `${greeting1} World!`;\n"Hello World!"\n')),(0,r.yg)("h2",{id:"chars"},"Chars"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"A ",(0,r.yg)("strong",{parentName:"p"},"char")," is the C# data type that represents a single symbol or alphanumeric character, in upper or lower case. Here's how we can create chars in the REPL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"> 'H'\n'H'\n> '9'\n'9'\n> '/'\n'/'\n")),(0,r.yg)("p",null,"Notice that we declare a char with apostrophes and not quotation marks \u2014 quotation marks ",(0,r.yg)("inlineCode",{parentName:"p"},'" "')," are reserved for creating strings, while apostrophes ",(0,r.yg)("inlineCode",{parentName:"p"},"' '")," are reserved for creating chars."),(0,r.yg)("p",null,"And here's how we can store a char in a variable by declaring it of the type ",(0,r.yg)("inlineCode",{parentName:"p"},"char"),"; this is also called ",(0,r.yg)("strong",{parentName:"p"},"assignment"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"> char myGrade = 'B';\n> myGrade\n'B'\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note that we cannot perform concatenation or interpolation with chars!")," "),(0,r.yg)("p",null,"There we go! Play around with strings and chars a bit more in the REPL before advancing to the next lesson."))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[14003],{15680:(e,a,t)=>{t.d(a,{xA:()=>d,yg:()=>y});var n=t(96540);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach(function(a){s(e,a,t[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})}return e}function l(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=n.createContext({}),p=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef(function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(t),m=s,y=g["".concat(o,".").concat(m)]||g[m]||c[m]||r;return t?n.createElement(y,i(i({ref:a},d),{},{components:t})):n.createElement(y,i({ref:a},d))});function y(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l[g]="string"==typeof e?e:s,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},42125:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/stages-empty-859b40a17d2d76e3a7a8362e207a8f03.png"},59221:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=t(58168),s=(t(96540),t(15680));const r={title:"\ud83d\udcd3 3.3.0.02 Introduction to Databases",day:"weekend",id:"3-3-0-02-introduction-to-databases",hide_table_of_contents:!0},i=void 0,l={unversionedId:"c-and-net/database-basics/3-3-0-02-introduction-to-databases",id:"c-and-net/database-basics/3-3-0-02-introduction-to-databases",title:"\ud83d\udcd3 3.3.0.02 Introduction to Databases",description:"Before we begin connecting databases to our MVC apps, let's explore how databases work. This lesson will walk through basic database vocabulary and discuss how most standard databases organize information.",source:"@site/docs/3_c-and-net/3_database-basics/AB-3-3-0-02-introduction-to-databases.md",sourceDirName:"3_c-and-net/3_database-basics",slug:"/c-and-net/database-basics/3-3-0-02-introduction-to-databases",permalink:"/v1.2/c-and-net/database-basics/3-3-0-02-introduction-to-databases",draft:!1,tags:[],version:"current",frontMatter:{title:"\ud83d\udcd3 3.3.0.02 Introduction to Databases",day:"weekend",id:"3-3-0-02-introduction-to-databases",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.3.0.01 Database Basics Objectives",permalink:"/v1.2/c-and-net/database-basics/3-3-0-01-database-basics-objectives"},next:{title:"\ud83d\udcd3 3.3.0.03 SQL Basics: Managing MySQL Databases from the Command Line",permalink:"/v1.2/c-and-net/database-basics/3-3-0-03-sql-basics-managing-mysql-databases-from-the-command-line"}},o={},p=[{value:"Database Structure",id:"database-structure",level:2},{value:"Example Databases",id:"example-databases",level:3},{value:"C# Classes and Database Tables",id:"c-classes-and-database-tables",level:2},{value:"Rows and Columns",id:"rows-and-columns",level:3},{value:"<code>stages</code> Table",id:"stages-table",level:4},{value:"<code>artists</code> Table",id:"artists-table",level:4},{value:"Primary Keys",id:"primary-keys",level:3}],d={toc:p},g="wrapper";function c(e){let{components:a,...r}=e;return(0,s.yg)(g,(0,n.A)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Before we begin connecting databases to our MVC apps, let's explore how databases work. This lesson will walk through basic database vocabulary and discuss how most standard databases organize information."),(0,s.yg)("h2",{id:"database-structure"},"Database Structure"),(0,s.yg)("hr",null),(0,s.yg)("p",null,'If you\'ve ever used Microsoft Excel or other similar software to create spreadsheets, you already know something about how databases are structured. Databases are like a bunch of linked spreadsheets. Each "spreadsheet" of information is called a ',(0,s.yg)("strong",{parentName:"p"},"table"),"."),(0,s.yg)("h3",{id:"example-databases"},"Example Databases"),(0,s.yg)("p",null,"Let's make a mock database table that includes names and phone numbers:"),(0,s.yg)("pre",null,"contacts ------- id | name    | phone ---+---------+----------- 1  | Ahmed   | 9165551212 2  | Jessica | 3235551212 3  | Sofia   | 4155551212"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Just like a spreadsheet, this database ",(0,s.yg)("strong",{parentName:"p"},"table")," has a name. This one is called ",(0,s.yg)("inlineCode",{parentName:"p"},"contacts"),".")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"It has three ",(0,s.yg)("strong",{parentName:"p"},"columns"),": ",(0,s.yg)("inlineCode",{parentName:"p"},"id"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"phone"),".")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"It also contains three entries, or ",(0,s.yg)("strong",{parentName:"p"},"rows"),": one for ",(0,s.yg)("inlineCode",{parentName:"p"},"Ahmed"),", one for ",(0,s.yg)("inlineCode",{parentName:"p"},"Jessica"),", and a third for ",(0,s.yg)("inlineCode",{parentName:"p"},"Sofia"),". Each row contains an ",(0,s.yg)("inlineCode",{parentName:"p"},"id"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"phone")," number corresponding to this person.  "))),(0,s.yg)("p",null,"Here's another example. This one contains booleans:"),(0,s.yg)("pre",null,"things_in_portland ------------------ id | category     | in_portland ---+--------------+------------ 1  | sunshine     | false 2  | moonshine    | true 3  | shiny things | true"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"This ",(0,s.yg)("strong",{parentName:"p"},"table")," is titled ",(0,s.yg)("inlineCode",{parentName:"p"},"things_in_portland"),".")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Its ",(0,s.yg)("strong",{parentName:"p"},"columns")," are ",(0,s.yg)("inlineCode",{parentName:"p"},"id"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"category"),", and ",(0,s.yg)("inlineCode",{parentName:"p"},"in_portland"),".")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"It contains three ",(0,s.yg)("strong",{parentName:"p"},"rows"),"."))),(0,s.yg)("h2",{id:"c-classes-and-database-tables"},"C# Classes and Database Tables"),(0,s.yg)("hr",null),(0,s.yg)("p",null,"Let's consider another basic example. This time, we'll explore how components of a database will work with logic from our C# applications."),(0,s.yg)("p",null,"Let's pretend we're organizing a music festival. The festival has multiple music stages and many different artists. We've been asked to create an app that will create a program for the festival by tracking the following information:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Which ",(0,s.yg)("strong",{parentName:"li"},"artists")," are playing at the festival, including;",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Their name."),(0,s.yg)("li",{parentName:"ul"},"How many members their band has."),(0,s.yg)("li",{parentName:"ul"},"The genre of music they play."))),(0,s.yg)("li",{parentName:"ul"},"Which ",(0,s.yg)("strong",{parentName:"li"},"stages")," the festival has, including;",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"The name of the stage."),(0,s.yg)("li",{parentName:"ul"},"The location of the stage in the festival."),(0,s.yg)("li",{parentName:"ul"},"The audience capacity at that stage.")))),(0,s.yg)("p",null,"Before we consider our database, let's first determine how we'd represent this information in C# code. We should immediately think of two classes for this application:  ",(0,s.yg)("inlineCode",{parentName:"p"},"Stage")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"Artist"),".  To keep it simple, our ",(0,s.yg)("inlineCode",{parentName:"p"},"Stage")," class has three properties: ",(0,s.yg)("inlineCode",{parentName:"p"},"Name"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"Location"),", and ",(0,s.yg)("inlineCode",{parentName:"p"},"Capacity"),". Our ",(0,s.yg)("inlineCode",{parentName:"p"},"Artist")," class also has three properties: ",(0,s.yg)("inlineCode",{parentName:"p"},"Name"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"Members"),", and",(0,s.yg)("inlineCode",{parentName:"p"},"Genre"),".  "),(0,s.yg)("p",null,"Here are the classes for ",(0,s.yg)("inlineCode",{parentName:"p"},"Artist")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"Stage"),":"),(0,s.yg)("div",{class:"filename"},"Stage.cs"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-csharp"},"class Stage\n{\n  public string Name { get; set; }\n  public string Location { get; set; }\n  public int Capacity { get; set; }\n}\n")),(0,s.yg)("div",{class:"filename"},"Artist.cs"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-csharp"},"class Artist\n{\n  public string Name { get; set; }\n  public string Members { get; set; }\n  public string Genre { get; set; }\n}\n")),(0,s.yg)("p",null,"In order to store these objects in a database, our database tables would be structured like this:"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},(0,s.yg)("em",{parentName:"strong"},"stages")," table"),(0,s.yg)("br",null),"\n",(0,s.yg)("img",{alt:"stages table",src:t(42125).A,width:"622",height:"214"}),(0,s.yg)("br",null),(0,s.yg)("br",null)),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},(0,s.yg)("em",{parentName:"strong"},"artists")," table"),(0,s.yg)("br",null),"\n",(0,s.yg)("img",{alt:"artists table",src:t(74878).A,width:"620",height:"216"}),(0,s.yg)("br",null),(0,s.yg)("br",null)),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"The C# class name matches the name of the corresponding database table.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Each class property is represented with a column on the table.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Classes in C# are singular and capitalized. However, corresponding database tables are plural and lower case. This is standard naming convention."))),(0,s.yg)("h3",{id:"rows-and-columns"},"Rows and Columns"),(0,s.yg)("p",null,"When we create new C# objects, we assign each object property a value in the constructor. We do the same when we store data in a database: assign values to each property. In effect, the equivalent of an object in the database is the ",(0,s.yg)("strong",{parentName:"p"},"row")," with each property value being stored in a property ",(0,s.yg)("strong",{parentName:"p"},"column"),".  "),(0,s.yg)("h4",{id:"stages-table"},(0,s.yg)("inlineCode",{parentName:"h4"},"stages")," Table"),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"stages table populated",src:t(66712).A,width:"722",height:"212"}),(0,s.yg)("br",null),(0,s.yg)("br",null)),(0,s.yg)("h4",{id:"artists-table"},(0,s.yg)("inlineCode",{parentName:"h4"},"artists")," Table"),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"artists table populated",src:t(94183).A,width:"720",height:"206"}),(0,s.yg)("br",null),(0,s.yg)("br",null)),(0,s.yg)("p",null,"Here, each ",(0,s.yg)("strong",{parentName:"p"},"row")," in the database represents a C# ",(0,s.yg)("inlineCode",{parentName:"p"},"Artist")," or ",(0,s.yg)("inlineCode",{parentName:"p"},"Stage")," object. Each of the object's properties is stored under the database column of the same name."),(0,s.yg)("h3",{id:"primary-keys"},"Primary Keys"),(0,s.yg)("p",null,"When database rows are added, the first column (usually called ",(0,s.yg)("inlineCode",{parentName:"p"},"id"),") is the ",(0,s.yg)("strong",{parentName:"p"},"primary key"),". This is a unique ID for ",(0,s.yg)("em",{parentName:"p"},"that specific row")," on ",(0,s.yg)("em",{parentName:"p"},"that specific table"),". It will never be repeated or reused in the table. Our database will make it for us automatically."),(0,s.yg)("p",null,"In our example, the ",(0,s.yg)("inlineCode",{parentName:"p"},"Blue stage")," has a primary key of ",(0,s.yg)("inlineCode",{parentName:"p"},"1")," on the ",(0,s.yg)("inlineCode",{parentName:"p"},"stages")," table and ",(0,s.yg)("inlineCode",{parentName:"p"},"Pink Martini")," has a primary key of ",(0,s.yg)("inlineCode",{parentName:"p"},"3")," on the ",(0,s.yg)("inlineCode",{parentName:"p"},"artists")," table. Similar to the manner we used ",(0,s.yg)("inlineCode",{parentName:"p"},"Id")," properties to locate specific objects last section, these primary database keys are used to locate specific database entries."))}c.isMDXComponent=!0},66712:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/stages-populated-11903bb2830cd9345aa65281ae9aa8a7.png"},74878:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/artists-empty-78eefc0228a968b6f33d0b80c2a76c4e.png"},94183:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/artists-populated-dd04d8f5d4dc62b01afe2fedc537515b.png"}}]);
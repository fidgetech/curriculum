"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[24880],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef(function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=i,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||o;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))});function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},67343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(58168),i=(n(96540),n(15680));const o={title:"\ud83d\udcd3 3.3.0.09 Using the Test Database",day:"weekend",id:"3-3-0-09-using-the-test-database",hide_table_of_contents:!0},r=void 0,s={unversionedId:"c-and-net/database-basics/3-3-0-09-using-the-test-database",id:"c-and-net/database-basics/3-3-0-09-using-the-test-database",title:"\ud83d\udcd3 3.3.0.09 Using the Test Database",description:"In this lesson, we'll connect our test project to the test database and update our teardown method to empty it.",source:"@site/docs/3_c-and-net/3_database-basics/AI-3-3-0-09-using-the-test-database.md",sourceDirName:"3_c-and-net/3_database-basics",slug:"/c-and-net/database-basics/3-3-0-09-using-the-test-database",permalink:"/v1.2/c-and-net/database-basics/3-3-0-09-using-the-test-database",draft:!1,tags:[],version:"current",frontMatter:{title:"\ud83d\udcd3 3.3.0.09 Using the Test Database",day:"weekend",id:"3-3-0-09-using-the-test-database",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.3.0.08 Creating a Test Database: Exporting and Importing Databases with MySQL Workbench",permalink:"/v1.2/c-and-net/database-basics/3-3-0-08-creating-a-test-database-exporting-and-importing-databases-with-mysql-workbench"},next:{title:"\ud83d\udcd3 3.3.0.10 Deleting Objects in the Database",permalink:"/v1.2/c-and-net/database-basics/3-3-0-10-deleting-objects-in-the-database"}},l={},p=[{value:"Using the Test Database",id:"using-the-test-database",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"In this lesson, we'll connect our test project to the test database and update our teardown method to empty it. "),(0,i.yg)("h2",{id:"using-the-test-database"},"Using the Test Database"),(0,i.yg)("hr",null),(0,i.yg)("p",null,"First, let's run ",(0,i.yg)("inlineCode",{parentName:"p"},"dotnet restore")," in our ",(0,i.yg)("inlineCode",{parentName:"p"},"ToDoList.Tests")," directory to update the Tests project with the MySqlConnector package that we added to the production project."),(0,i.yg)("p",null,"Next, let's update ",(0,i.yg)("inlineCode",{parentName:"p"},"appsettings.json")," in our production directory to include a new database connection string, this time for our test database. As usual, make sure to update the ",(0,i.yg)("inlineCode",{parentName:"p"},"pwd")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"uid")," keys with your own values. In the lessons in LearnHowToProgram.com, we always assume the ",(0,i.yg)("inlineCode",{parentName:"p"},"uid")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"root")," and the ",(0,i.yg)("inlineCode",{parentName:"p"},"pwd")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"epicodus"),"."),(0,i.yg)("div",{class:"filename"},"ToDoList/appsettings.json"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "ConnectionStrings": {\n      "DefaultConnection": "Server=localhost;Port=3306;database=to_do_list_with_mysqlconnector;uid=[YOUR-USERNAME-HERE];pwd=[YOUR-PASSWORD-HERE];",\n      "TestConnection": "Server=localhost;Port=3306;database=to_do_list_with_mysqlconnector_test;uid=[YOUR-USERNAME-HERE];pwd=[YOUR-PASSWORD-HERE];"\n  }\n}\n')),(0,i.yg)("p",null,"Next, we'll refactor our existing ",(0,i.yg)("inlineCode",{parentName:"p"},"ItemTests.cs")," file. Take a look at the new code, and then we'll discuss it below."),(0,i.yg)("div",{class:"filename"},"ToDoList.Tests/ModelTests/ItemTests.cs"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.Extensions.Configuration;\n...\n\nnamespace ToDoList.Tests\n{\n\n  [TestClass]\n  public class ItemTests : IDisposable\n  {\n    // we\'ve added a new property\n    public IConfiguration Configuration { get; set; }\n\n    public void Dispose()\n    {\n      Item.ClearAll();\n    }\n\n    // we\'ve added a constructor\n    public ItemTests()\n    {\n      IConfigurationBuilder builder = new ConfigurationBuilder()\n          .AddJsonFile("appsettings.json");\n      Configuration = builder.Build();\n      DBConfiguration.ConnectionString = Configuration["ConnectionStrings:TestConnection"];\n    }\n\n    // existing tests here\n    ...\n\n  }\n}\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"First, we include a new ",(0,i.yg)("inlineCode",{parentName:"p"},"using")," directive to import ",(0,i.yg)("inlineCode",{parentName:"p"},"Microsoft.Extensions.Configuration")," namespace. From this namespace, we'll use the ",(0,i.yg)("inlineCode",{parentName:"p"},"ConfigurationBuilder();")," method to load ",(0,i.yg)("inlineCode",{parentName:"p"},"appsettings.json")," with our app's configurations. ")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Then we create a property that we'll use to same our app's configurations.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Finally, we set up a constructor for the ",(0,i.yg)("inlineCode",{parentName:"p"},"ItemTests")," class that does the work of setting up the database connection:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"We create a ",(0,i.yg)("inlineCode",{parentName:"li"},"Configuration")," object that includes all of the data in our ",(0,i.yg)("inlineCode",{parentName:"li"},"appsettings.json"),". "),(0,i.yg)("li",{parentName:"ul"},"We set ",(0,i.yg)("inlineCode",{parentName:"li"},"DBConfiguration.ConnectionString")," to the ",(0,i.yg)("inlineCode",{parentName:"li"},'"TestConnection"')," database connection string, which we access through the ",(0,i.yg)("inlineCode",{parentName:"li"},"Configuration")," object. This overrides the ",(0,i.yg)("inlineCode",{parentName:"li"},"DBConfiguration.ConnectionString")," we set in ",(0,i.yg)("inlineCode",{parentName:"li"},"DatabaseConfig.cs"),", ensuring that our tests are connected to our test database, not our development database.")))),(0,i.yg)("p",null,"Take note of one detail: we're loading our app's configurations with different tools than we use in ",(0,i.yg)("inlineCode",{parentName:"p"},"Program.cs"),". In ",(0,i.yg)("inlineCode",{parentName:"p"},"Program.cs"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"appsettings.json")," is implicitly loaded when we create a ",(0,i.yg)("inlineCode",{parentName:"p"},"WebApplicationBuilder")," with the ",(0,i.yg)("inlineCode",{parentName:"p"},"WebApplication.CreateBuilder(args);")," method. This does not happen with the ",(0,i.yg)("inlineCode",{parentName:"p"},"ConfigurationBuilder()")," method that we use in ",(0,i.yg)("inlineCode",{parentName:"p"},"ItemTests.cs"),". Instead, we need to load application configurations manually, which is why we call ",(0,i.yg)("inlineCode",{parentName:"p"},'.AddJsonFile("appsettings.json");'),". "),(0,i.yg)("p",null,"The scope of these two methods is also different: ",(0,i.yg)("inlineCode",{parentName:"p"},"ConfigurationBuilder()")," focuses on creating a configuration object, which is one aspect of creating a web application host, whereas ",(0,i.yg)("inlineCode",{parentName:"p"},"WebApplication.CreateBuilder();")," creates a basic web application host. It's not important to remember these details, just to note that we're using two different processes of loading ",(0,i.yg)("inlineCode",{parentName:"p"},"appsettings.json")," in our project."),(0,i.yg)("p",null,"Finally, note that our ",(0,i.yg)("inlineCode",{parentName:"p"},"ClearAll()")," method isn't programmed to interact with the database yet, but we'll tackle that in the next lesson."))}u.isMDXComponent=!0}}]);
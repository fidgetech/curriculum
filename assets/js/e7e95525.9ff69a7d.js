"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[49336],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach(function(n){a(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef(function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),u=a,m=p["".concat(l,".").concat(u)]||p[u]||g[u]||i;return t?r.createElement(m,s(s({ref:n},d),{},{components:t})):r.createElement(m,s({ref:n},d))});function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},15820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const i={title:"\ud83d\udcd3 1.1.4.3 Classes and Ids",day:"thursday",id:"1-1-4-3-classes-and-ids",hide_table_of_contents:!0},s=void 0,o={unversionedId:"introduction-to-programming/git-html-and-css/1-1-4-3-classes-and-ids",id:"version-1.1/introduction-to-programming/git-html-and-css/1-1-4-3-classes-and-ids",title:"\ud83d\udcd3 1.1.4.3 Classes and Ids",description:"Before we go on let's briefly note the difference between assigning a class to an HTML tag and assigning an id to an HTML tag. For the remainder of this section you can ignore id's and continue using classes, but a brief explanation is in order as you are likely to find references to id's when reading resources online.",source:"@site/versioned_docs/version-1.1/1_introduction-to-programming/1_git-html-and-css/BO-1-1-4-3-classes-and-ids.md",sourceDirName:"1_introduction-to-programming/1_git-html-and-css",slug:"/introduction-to-programming/git-html-and-css/1-1-4-3-classes-and-ids",permalink:"/v1.1/introduction-to-programming/git-html-and-css/1-1-4-3-classes-and-ids",draft:!1,tags:[],version:"1.1",frontMatter:{title:"\ud83d\udcd3 1.1.4.3 Classes and Ids",day:"thursday",id:"1-1-4-3-classes-and-ids",hide_table_of_contents:!0},sidebar:"introduction-to-programming",previous:{title:"\u270f\ufe0f 1.1.4.2 Practice: Cascading",permalink:"/v1.1/introduction-to-programming/git-html-and-css/1-1-4-2-practice-cascading"},next:{title:"\ud83d\udcd3 1.1.4.4 Introduction to Bootstrap",permalink:"/v1.1/introduction-to-programming/git-html-and-css/1-1-4-4-introduction-to-bootstrap"}},l={},c=[],d={toc:c},p="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Before we go on let's briefly note the difference between assigning a ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"class"))," to an HTML tag and assigning an ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"id"))," to an HTML tag. For the remainder of this section you can ignore id's and continue using classes, but a brief explanation is in order as you are likely to find references to id's when reading resources online."),(0,a.yg)("p",null,"Both classes and ids can be targeted by CSS rules (classes with a ",(0,a.yg)("inlineCode",{parentName:"p"},".")," and id's with a ",(0,a.yg)("inlineCode",{parentName:"p"},"#")," symbol). For example, both paragraph tags below are styled the same, though one is referenced by class and the other by id."),(0,a.yg)("div",{class:"filename"},"index.html"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<html lang="en-US">\n<head>\n  <link href="styles.css" rel="stylesheet" type="text/css" media="all">\n  <title>Some Exciting Red Text</title>\n</head>\n<body>\n  <p class="intro">This text will appear red.</p>\n  <p id="line2">This text will also be red. </p>\n</body>\n</html>\n')),(0,a.yg)("div",{class:"filename"},"styles.css"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-css"},".intro {\n  color: red;\n}\n\n#line2 {\n  color: red;\n}\n")),(0,a.yg)("p",null,"The important difference is that ",(0,a.yg)("strong",{parentName:"p"},"ids are unique"),", while ",(0,a.yg)("strong",{parentName:"p"},"classes are not unique"),". We can use the same class on multiple elements, while id's must be unique to a single element on the page. Id's may appear to work even when duplicated on the same page, but duplicate id's will lead to inconsistent behavior and difficult-to-find bugs."),(0,a.yg)("p",null,"If in doubt, use a class."))}g.isMDXComponent=!0}}]);
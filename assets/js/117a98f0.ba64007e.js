"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[34362],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),h=o,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},35454:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={title:"\ud83d\udcd3 Tries",id:"tries",slug:"tries",hide_table_of_contents:!0,sidebar_position:43,day:"thursday",type:"lesson",url:"https://github.com/epicodus-curriculum/capstone/blob/main/tries.md"},i=void 0,s={unversionedId:"capstone/capstone-week-1/tries",id:"capstone/capstone-week-1/tries",title:"\ud83d\udcd3 Tries",description:'In this lesson, we will introduce the trie (pronounced "try"), which is a kind of tree that\'s often used for storing and retrieving strings. In fact, the word trie is associated with the "trie" in retrieval. We\'ll focus on the basics of what a trie is in this lesson. Then, if you like, you can do further research on your own to learn about how to add, remove, and find values in a trie.',source:"@site/docs/capstone/1_capstone-week-1/BQ-tries.md",sourceDirName:"capstone/1_capstone-week-1",slug:"/capstone/capstone-week-1/tries",permalink:"/capstone/capstone-week-1/tries",draft:!1,tags:[],version:"current",sidebarPosition:43,frontMatter:{title:"\ud83d\udcd3 Tries",id:"tries",slug:"tries",hide_table_of_contents:!0,sidebar_position:43,day:"thursday",type:"lesson",url:"https://github.com/epicodus-curriculum/capstone/blob/main/tries.md"},sidebar:"capstone",previous:{title:"\ud83d\udcd3 Heaps",permalink:"/capstone/capstone-week-1/heaps"},next:{title:"\ud83d\udcd3 Memory Basics",permalink:"/capstone/capstone-week-1/memory-basics"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this lesson, we will introduce the ",(0,o.kt)("strong",{parentName:"p"},"trie"),' (pronounced "try"), which is a kind of tree that\'s often used for storing and retrieving strings. In fact, the word ',(0,o.kt)("strong",{parentName:"p"},"trie"),' is associated with the "trie" in re',(0,o.kt)("strong",{parentName:"p"},"trie"),"val. We'll focus on the basics of what a trie is in this lesson. Then, if you like, you can do further research on your own to learn about how to add, remove, and find values in a trie."),(0,o.kt)("p",null,"A trie always has an \"empty\" root node with references to other nodes. Because of the references, it's not really empty \u2014 but the root node doesn't have a value on its own. It's common to use tries to store words, so if we were going to use a trie to store English words, we'd have a root node with 26 child nodes. Each child node would represent a letter of the alphabet."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://learnhowtoprogram.s3.us-west-2.amazonaws.com/computer-science-curriculum-2020/trie_1.png",alt:"This trie shows an empty root node plus the first three letters of the alphabet."})),(0,o.kt)("p",null,"To simplify things, the trie above just shows the first three letters of the alphabet."),(0,o.kt)("p",null,"So what happens once we want to add actual words to a trie?"),(0,o.kt)("p",null,"Each child node has a reference to each letter of the alphabet \u2014 just like the root node. So we'd construct words by adding more child nodes to the trie."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://learnhowtoprogram.s3.us-west-2.amazonaws.com/computer-science-curriculum-2020/trie2.png",alt:'This trie includes the words "cat", "call", and "cot".'})),(0,o.kt)("p",null,"This trie now includes three words: ",(0,o.kt)("em",{parentName:"p"},"cat"),", ",(0,o.kt)("em",{parentName:"p"},"call"),", and ",(0,o.kt)("em",{parentName:"p"},"cot"),". Each use the ",(0,o.kt)("em",{parentName:"p"},"C")," node, which now has two child nodes to represent the three words we've added: an ",(0,o.kt)("em",{parentName:"p"},"A")," node and an ",(0,o.kt)("em",{parentName:"p"},"O")," node. Cat and call both use the ",(0,o.kt)("em",{parentName:"p"},"C")," and its child ",(0,o.kt)("em",{parentName:"p"},"A")," node. If we were going to add the word ",(0,o.kt)("em",{parentName:"p"},"can"),", it would also use these two nodes before diverging."),(0,o.kt)("p",null,"The main advantage of tries is that they can retrieve strings very quickly. However, a significant disadvantage of tries is that they take a large amount of memory. Despite the memory issue, there are many important use cases for quick string retrieval. For instance, consider the autofill feature on search engines. A trie can be used to quickly determine possible substrings if a user has typed in the letters ",(0,o.kt)("em",{parentName:"p"},"c")," and ",(0,o.kt)("em",{parentName:"p"},"a"),". You can likely imagine many other use cases where quickly retrieving strings is important \u2014 ranging from the fields of genomics to data analytics."),(0,o.kt)("p",null,"If you'd like to learn how to create and search a trie yourself, check out the following article: ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@alexanderv/tries-javascript-simple-implementation-e2a4e54e4330"},"Tries \u2014 JavaScript Simple Implementation"),"."))}d.isMDXComponent=!0}}]);
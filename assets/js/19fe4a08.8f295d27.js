"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[99461],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},70719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={title:"\u270f\ufe0f Bit Manipulation Practice",id:"bit-manipulation-practice",slug:"bit-manipulation-practice",hide_table_of_contents:!0,sidebar_position:29,day:"wednesday",type:"exercise",url:"https://github.com/epicodus-curriculum/capstone/blob/main/4_bit_manipulation_problems.md"},o=void 0,s={unversionedId:"capstone/capstone-week-1/bit-manipulation-practice",id:"capstone/capstone-week-1/bit-manipulation-practice",title:"\u270f\ufe0f Bit Manipulation Practice",description:"Now it's time to practice using bitwise manipulation. The problems below are sorted from easiest to hardest. See if you can try solving them with a whiteboard. If not, solving them in VS Code is fine, too.",source:"@site/docs/capstone/1_capstone-week-1/BC-bit-manipulation-practice.md",sourceDirName:"capstone/1_capstone-week-1",slug:"/capstone/capstone-week-1/bit-manipulation-practice",permalink:"/capstone/capstone-week-1/bit-manipulation-practice",draft:!1,tags:[],version:"current",sidebarPosition:29,frontMatter:{title:"\u270f\ufe0f Bit Manipulation Practice",id:"bit-manipulation-practice",slug:"bit-manipulation-practice",hide_table_of_contents:!0,sidebar_position:29,day:"wednesday",type:"exercise",url:"https://github.com/epicodus-curriculum/capstone/blob/main/4_bit_manipulation_problems.md"},sidebar:"capstone",previous:{title:"\ud83d\udcd3 Manipulating Bits",permalink:"/capstone/capstone-week-1/manipulating-bits"},next:{title:"\ud83d\udcd3 Introduction to Hash Tables",permalink:"/capstone/capstone-week-1/introduction-to-hash-tables"}},l={},p=[{value:"Odd or Even Number",id:"odd-or-even-number",level:3},{value:"True Love",id:"true-love",level:3},{value:"One Hit Wonder",id:"one-hit-wonder",level:3},{value:"Encrypter",id:"encrypter",level:3}],u={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Now it's time to practice using bitwise manipulation. The problems below are sorted from easiest to hardest. See if you can try solving them with a whiteboard. If not, solving them in VS Code is fine, too."),(0,a.kt)("h3",{id:"odd-or-even-number"},"Odd or Even Number"),(0,a.kt)("p",null,"Write a function that looks at a number's binary representation to determine if it is even or odd."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Hint:")," Start by writing out 1 to 10 in binary (or even higher if you want to practice). Look for a pattern you can use to determine whether a number is even or odd."),(0,a.kt)("h3",{id:"true-love"},"True Love"),(0,a.kt)("p",null,"Paris, a nonbinary princex, is searching all the kingdoms of the land to find another nonbinary princex to marry. To find the right match, Paris's advisors have used the Myers-Briggs test to try to find the best fit. (",(0,a.kt)("strong",{parentName:"p"},"Note:")," We are not advocating for the Myers-Briggs test in any way \u2014 it just lends itself nicely to being written as binary code.) This test looks at four qualities:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Extraversion versus Introversion"),(0,a.kt)("li",{parentName:"ul"},"Sensing versus Intuition"),(0,a.kt)("li",{parentName:"ul"},"Thinking versus Feeling"),(0,a.kt)("li",{parentName:"ul"},"Judgment versus Perception")),(0,a.kt)("p",null,"Here's the princex list so far (including Paris):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const princexList = {\n  Paris: {\n    eVsI: "E",\n    sVsI: "S",\n    tVsF: "F",\n    jVsP: "P"\n  },\n  Pat: {\n    eVsI: "I",\n    sVsI: "S",\n    tVsF: "T",\n    jVsP: "P"\n  },\n  Pau: {\n    eVsI: "E",\n    sVsI: "S",\n    tVsF: "T",\n    jVsP: "J"\n  },\n  Pearl: {\n    eVsI: "E",\n    sVsI: "I",\n    tVsF: "T",\n    jVsP: "P"\n  },\n  Puck: {\n    eVsI: "I",\n    sVsI: "S",\n    tVsF: "T",\n    jVsP: "J"\n  },\n  Pluto: {\n    eVsI: "E",\n    sVsI: "S",\n    tVsF: "T",\n    jVsP: "P"\n  },\n  Parker: {\n    eVsI: "I",\n    sVsI: "S",\n    tVsF: "T",\n    jVsP: "J"\n  }\n}\n')),(0,a.kt)("p",null,"That's a lot of data that could be stored much more efficiently \u2014 especially since Paris has recently decided to expand their search to ",(0,a.kt)("em",{parentName:"p"},"all")," the people in the kingdom \u2014 not just people from the princex list above. Since we now have potentially millions of people to search through, our first task is to store all the information about each person in the kingdom into a single binary number instead of a basic object."),(0,a.kt)("p",null,"Your first task is to write a function that converts the results of each person's Myers-Briggs test into a series of zeroes and ones."),(0,a.kt)("p",null,"For instance, this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'Paris: {\n  eVsI: "E",\n  sVsI: "S",\n  tVsF: "F",\n  jVsP: "P"\n}\n')),(0,a.kt)("p",null,"Could be converted into this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'["Paris", 1100]\n')),(0,a.kt)("p",null,"This assumes that the first option (extraversion, sensing, thinking, judgment) of each binary Myers-Brigg quality is translated to a 1 while the second option (information, intuition, feeling, perception) is translated to 0."),(0,a.kt)("p",null,"Next, translate ",(0,a.kt)("inlineCode",{parentName:"p"},"princexList")," list into an array of arrays called ",(0,a.kt)("inlineCode",{parentName:"p"},"princexArray"),". Each nested array should contain a key (the name of the person) and a value (the results of their Myers-Briggs test in binary code)."),(0,a.kt)("p",null,"So how much less memory does this ",(0,a.kt)("inlineCode",{parentName:"p"},"princexArray")," take than ",(0,a.kt)("inlineCode",{parentName:"p"},"princexList"),"? We can use an NPM library called ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/object-sizeof"},"object-sizeof")," to find out. Don't worry, you don't need to use this library in your own code unless you are curious to compare the size of various objects."),(0,a.kt)("p",null,"We can use this library to calculate the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"princexList")," (our basic object) uses 342 bytes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"princexArray")," (our array) uses 126 bytes.")),(0,a.kt)("p",null,"Note that these savings are mostly due to using an array instead of an object, not because we are using a binary number. Both ",(0,a.kt)("inlineCode",{parentName:"p"},"1100")," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"ESFP"')," use 8 bytes in JavaScript. ",(0,a.kt)("em",{parentName:"p"},"However"),", let's say we wanted to compare 16 values instead of 4. A 16-digit number that uses zeroes and ones still takes 8 bytes \u2014 while a 16-digit string takes 32 bytes. The savings become more apparent the more boolean values there are to compare. This may not seem like much difference but in very large datasets, it becomes more significant."),(0,a.kt)("p",null,"Next, write an algorithm that uses bitwise operators to determine whether a person is a good match for Paris. If three or more values on the Myers-Briggs test are the same, they should be a good match. If all four values are the same, they should be a great match. How you sort this information is up to you."),(0,a.kt)("h3",{id:"one-hit-wonder"},"One Hit Wonder"),(0,a.kt)("p",null,"Create an algorithm that returns a pattern that looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"00000001\n00000010\n00000100\n00001000\n00010000\n00100000\n01000000\n10000000\n")),(0,a.kt)("p",null,"Then, the next time through, the 1 should skip two spaces ahead instead of 1, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"000000001\n000000100\n000010000\n001000000\n100000000\n")),(0,a.kt)("p",null,"The next time it should skip through 3, and then 4, and so on until it skips 8 times. Note that to account for the overlap, the pattern won't always end like this ",(0,a.kt)("inlineCode",{parentName:"p"},"1000000")," and then start anew like this ",(0,a.kt)("inlineCode",{parentName:"p"},"00000001"),"."),(0,a.kt)("p",null,"Then solve the program so it works with any number of bits."),(0,a.kt)("h3",{id:"encrypter"},"Encrypter"),(0,a.kt)("p",null,"Next, write a function that encrypts a five-letter string using bitwise manipulation. You will need to use methods that convert letters to numbers and then back to do so. See the ",(0,a.kt)("a",{parentName:"p",href:"link-here"},"ASCII lesson")," for a refresher. You may come up with your own implementation, or you may try the one below:"),(0,a.kt)("p",null,"The encrypter should do the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It should do a binary left shift of two for each letter."),(0,a.kt)("li",{parentName:"ul"},"Next, it should switch every bit in each binary number to its opposite."),(0,a.kt)("li",{parentName:"ul"},"Next, it should do another left shift for each letter, this one of three."),(0,a.kt)("li",{parentName:"ul"},"At this point, there should be encrypted binary representations of all five letters. Merge these into one long binary string and then convert it to the decimal number system. The method should return this number.")),(0,a.kt)("p",null,"Next, try writing a method to decrypt the number back to its original string."))}h.isMDXComponent=!0}}]);
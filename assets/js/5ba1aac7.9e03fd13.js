"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[22484],{15680:(e,n,t)=>{t.d(n,{xA:()=>y,yg:()=>m});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach(function(n){i(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},y=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef(function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,y=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,m=c["".concat(d,".").concat(u)]||c[u]||s[u]||o;return t?a.createElement(m,r(r({ref:n},y),{},{components:t})):a.createElement(m,r({ref:n},y))});function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},67319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(58168),i=(t(96540),t(15680));const o={title:"\ud83d\udcd3 3.4.0.7 Many-to-Many Update Functionality",day:"weekend",id:"3-4-0-7-many-to-many-update-functionality",hide_table_of_contents:!0},r=void 0,l={unversionedId:"c-and-net/many-to-many-relationships/3-4-0-7-many-to-many-update-functionality",id:"version-1.1/c-and-net/many-to-many-relationships/3-4-0-7-many-to-many-update-functionality",title:"\ud83d\udcd3 3.4.0.7 Many-to-Many Update Functionality",description:"We've added create and read functionality for our Tag entity and ItemTag join entity. Now we're ready to move onto adding update and delete functionality.",source:"@site/versioned_docs/version-1.1/3_c-and-net/4_many-to-many-relationships/AG-3-4-0-7-many-to-many-update-functionality.md",sourceDirName:"3_c-and-net/4_many-to-many-relationships",slug:"/c-and-net/many-to-many-relationships/3-4-0-7-many-to-many-update-functionality",permalink:"/v1.1/c-and-net/many-to-many-relationships/3-4-0-7-many-to-many-update-functionality",draft:!1,tags:[],version:"1.1",frontMatter:{title:"\ud83d\udcd3 3.4.0.7 Many-to-Many Update Functionality",day:"weekend",id:"3-4-0-7-many-to-many-update-functionality",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.4.0.6 Many-to-Many Create Functionality",permalink:"/v1.1/c-and-net/many-to-many-relationships/3-4-0-6-many-to-many-create-functionality"},next:{title:"\ud83d\udcd3 3.4.0.8 Many-to-Many Delete Functionality",permalink:"/v1.1/c-and-net/many-to-many-relationships/3-4-0-8-many-to-many-delete-functionality"}},d={},p=[{value:"UPDATE: Adding Update Functionality to <code>Tag</code>s",id:"update-adding-update-functionality-to-tags",level:2}],y={toc:p},c="wrapper";function s(e){let{components:n,...t}=e;return(0,i.yg)(c,(0,a.A)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"We've added create and read functionality for our ",(0,i.yg)("inlineCode",{parentName:"p"},"Tag")," entity and ",(0,i.yg)("inlineCode",{parentName:"p"},"ItemTag")," join entity. Now we're ready to move onto adding update and delete functionality. "),(0,i.yg)("p",null,"We won't add full CRUD for the ",(0,i.yg)("inlineCode",{parentName:"p"},"ItemTag")," join entity, just CRD functionality. Instead of allowing users to update join relationships, we'll simply have them create or delete relationships. "),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Tag")," entity on the other hand will have full CRUD functionality. So in this lesson we'll update our ",(0,i.yg)("inlineCode",{parentName:"p"},"TagsController")," and views to have update functionality."),(0,i.yg)("h2",{id:"update-adding-update-functionality-to-tags"},"UPDATE: Adding Update Functionality to ",(0,i.yg)("inlineCode",{parentName:"h2"},"Tag"),"s"),(0,i.yg)("hr",null),(0,i.yg)("p",null,"Let's start by creating ",(0,i.yg)("inlineCode",{parentName:"p"},"Edit()")," GET and POST actions in the ",(0,i.yg)("inlineCode",{parentName:"p"},"TagsController.cs"),"."),(0,i.yg)("p",null,"Here's the new code we'll add:"),(0,i.yg)("div",{class:"filename"},"Controllers/TagsController.cs"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'...\n\n    public ActionResult Edit(int id)\n    {\n      Tag thisTag = _db.Tags.FirstOrDefault(tags => tags.TagId == id);\n      return View(thisTag);\n    }\n\n    [HttpPost]\n    public ActionResult Edit(Tag tag)\n    {\n      _db.Tags.Update(tag);\n      _db.SaveChanges();\n      return RedirectToAction("Index");\n    }\n\n...\n')),(0,i.yg)("p",null,"The above code is the exact same as the code for update functionality in the ",(0,i.yg)("inlineCode",{parentName:"p"},"CategoriesController"),": we pass the specific tag that we want to update to the view in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Edit()")," GET action, and then we update our database with the new ",(0,i.yg)("inlineCode",{parentName:"p"},"tag")," in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Edit()")," POST action. When we're done, we redirect to the ",(0,i.yg)("inlineCode",{parentName:"p"},"Index()")," action."),(0,i.yg)("p",null,"Next, let's create a view for our edit functionality. Within the ",(0,i.yg)("inlineCode",{parentName:"p"},"Views/Tags/")," subdirectory, create a new file called ",(0,i.yg)("inlineCode",{parentName:"p"},"Edit.cshtml")," and add the following code:"),(0,i.yg)("div",{class:"filename"},"Views/Tags/Edit.cshtml"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-html"},'@{\n  Layout = "_Layout";\n}\n\n@model ToDoList.Models.Tag\n\n<h2>Edit</h2>\n\n<h4>Edit this tag: @Html.DisplayFor(model => model.Title)</h4>\n\n@using (Html.BeginForm())\n{\n    @Html.HiddenFor(model => model.TagId)\n\n    @Html.LabelFor(model => model.Title)\n    @Html.EditorFor(model => model.Title)\n\n    <input type="submit" value="Save" />\n}\n\n<p>@Html.ActionLink("Back to list", "Index")</p>\n')),(0,i.yg)("p",null,"Finally, let's finish up by adding a link to our new ",(0,i.yg)("inlineCode",{parentName:"p"},"Edit")," route to our tag's ",(0,i.yg)("inlineCode",{parentName:"p"},"Details.cshtml"),":"),(0,i.yg)("div",{class:"filename"},"Views/Tags/Details.cshtml"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'...\n<p>@Html.ActionLink("Edit Tag", "Edit", new { id = Model.TagId })</p>\n')),(0,i.yg)("p",null,"Now, if we run our application we should be able to edit tags. Up next, we'll add delete functionality for ",(0,i.yg)("inlineCode",{parentName:"p"},"Tag"),"s and ",(0,i.yg)("inlineCode",{parentName:"p"},"ItemTag")," join entities."))}s.isMDXComponent=!0}}]);
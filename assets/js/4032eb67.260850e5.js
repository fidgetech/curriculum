"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[61080],{14259:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=t(58168),o=(t(96540),t(15680));const a={title:"\ud83d\udcd3 3.2.0.10 Introduction to Controllers, Routes and URLs",day:"weekend",id:"3-2-0-10-introduction-to-controllers-routes-and-urls",hide_table_of_contents:!0},l=void 0,i={unversionedId:"c-and-net/basic-web-applications/3-2-0-10-introduction-to-controllers-routes-and-urls",id:"version-1.1/c-and-net/basic-web-applications/3-2-0-10-introduction-to-controllers-routes-and-urls",title:"\ud83d\udcd3 3.2.0.10 Introduction to Controllers, Routes and URLs",description:"Now that we can successfully run a project, we're ready to start building our application out further. We'll start by adding a new controller file. This file's job is to receive the requests a user will send the server and return the correct corresponding information to display in the browser.",source:"@site/versioned_docs/version-1.1/3_c-and-net/2_basic-web-applications/AJ-3-2-0-10-introduction-to-controllers-routes-and-urls.md",sourceDirName:"3_c-and-net/2_basic-web-applications",slug:"/c-and-net/basic-web-applications/3-2-0-10-introduction-to-controllers-routes-and-urls",permalink:"/v1.1/c-and-net/basic-web-applications/3-2-0-10-introduction-to-controllers-routes-and-urls",draft:!1,tags:[],version:"1.1",frontMatter:{title:"\ud83d\udcd3 3.2.0.10 Introduction to Controllers, Routes and URLs",day:"weekend",id:"3-2-0-10-introduction-to-controllers-routes-and-urls",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.2.0.9 Building and Running an ASP.NET Core MVC Web App",permalink:"/v1.1/c-and-net/basic-web-applications/3-2-0-9-building-and-running-an-asp-net-core-mvc-web-app"},next:{title:"\ud83d\udcd3 3.2.0.11 Custom URL Paths",permalink:"/v1.1/c-and-net/basic-web-applications/3-2-0-11-custom-url-paths"}},s={},p=[{value:"Writing a Controller",id:"writing-a-controller",level:2},{value:"Routes",id:"routes",level:2},{value:"Invoking Routes",id:"invoking-routes",level:2},{value:"More Routes",id:"more-routes",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Now that we can successfully run a project, we're ready to start building our application out further. We'll start by adding a new ",(0,o.yg)("strong",{parentName:"p"},"controller")," file. This file's job is to receive the requests a user will send the server and return the correct corresponding information to display in the browser."),(0,o.yg)("h2",{id:"writing-a-controller"},"Writing a Controller"),(0,o.yg)("hr",null),(0,o.yg)("p",null,"If you followed along with the previous lessons, you already have a subdirectory called ",(0,o.yg)("inlineCode",{parentName:"p"},"Controllers")," within the production directory ",(0,o.yg)("inlineCode",{parentName:"p"},"FriendLetter"),". If not, add one now. Having a ",(0,o.yg)("inlineCode",{parentName:"p"},"Controllers")," subdirectory is standard convention within Model-View-Controller (MVC) frameworks. We'll add a file called ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController.cs")," to within the ",(0,o.yg)("inlineCode",{parentName:"p"},"Controllers")," subdirectory."),(0,o.yg)("p",null,"The resulting structure for our ",(0,o.yg)("inlineCode",{parentName:"p"},"Controllers")," directory and ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," file should look like this:"),(0,o.yg)("pre",null,"FriendLetter.Solution \u2514\u2500\u2500 FriendLetter \u2514\u2500\u2500 Controllers \u2514\u2500\u2500 HomeController.cs"),(0,o.yg)("p",null,"Let's add code to our new controller file:"),(0,o.yg)("div",{class:"filename"},"FriendLetter/Controllers/HomeController.cs"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"using Microsoft.AspNetCore.Mvc;\n\nnamespace FriendLetter.Controllers\n{\n  public class HomeController : Controller\n  {\n\n  }\n}\n")),(0,o.yg)("p",null,"We add a ",(0,o.yg)("inlineCode",{parentName:"p"},"using")," statement that imports functionality from the ASP.NET Core MVC package listed in our ",(0,o.yg)("inlineCode",{parentName:"p"},".csproj")," file. This line imports the ",(0,o.yg)("inlineCode",{parentName:"p"},"Microsoft.AspNetCore.Mvc")," namespace into our controller, so we have access to ASP.NET Core's built in ",(0,o.yg)("inlineCode",{parentName:"p"},"Controller")," class. We'll see ",(0,o.yg)("em",{parentName:"p"},"why")," we need access in just a moment."),(0,o.yg)("p",null,"Then we add a ",(0,o.yg)("inlineCode",{parentName:"p"},"FriendLetter.Controllers")," namespace with a class called ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," inside of it. "),(0,o.yg)("p",null,"Notice this syntax:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cs"},"class HomeController : Controller\n")),(0,o.yg)("p",null,"By adding ",(0,o.yg)("inlineCode",{parentName:"p"},": Controller")," to our ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," class, we tell our program that ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," should ",(0,o.yg)("strong",{parentName:"p"},"inherit")," or ",(0,o.yg)("strong",{parentName:"p"},"extend")," functionality from ASP.NET Core's built-in ",(0,o.yg)("inlineCode",{parentName:"p"},"Controller")," class that we import with our ",(0,o.yg)("inlineCode",{parentName:"p"},"using")," statement."),(0,o.yg)("h2",{id:"routes"},"Routes"),(0,o.yg)("hr",null),(0,o.yg)("p",null,"Let's add a route to our new ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," class."),(0,o.yg)("div",{class:"filename"},"FriendLetter/Controllers/HomeController.cs"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.AspNetCore.Mvc;\n\nnamespace FriendLetter.Controllers\n{\n  public class HomeController : Controller\n  {\n\n    public string Hello() { return "Hello friend!"; }\n\n  }\n}\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method represents a ",(0,o.yg)("strong",{parentName:"p"},"route")," in our application. As we discussed in the ",(0,o.yg)("a",{parentName:"p",href:"../../c-and-net/basic-web-applications/3-2-0-3-how-the-web-works-uniform-resource-locator"},"Uniform Resource Locators (URLS)")," lesson:"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"The ",(0,o.yg)("strong",{parentName:"p"},"path")," consists of one or more segments separated by slashes. It provides a name for identifying the specific resource requested.")),(0,o.yg)("p",null,"For instance, we can see all courses on LearnHowToProgram.com by visiting this URL:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"https://old.learnhowtoprogram.com/courses\n")),(0,o.yg)("p",null,"In this example, ",(0,o.yg)("inlineCode",{parentName:"p"},"/courses")," is the ",(0,o.yg)("strong",{parentName:"p"},"path"),". "),(0,o.yg)("p",null,"How does this relate to our ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method? Because the ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method is a ",(0,o.yg)("strong",{parentName:"p"},"route"),", it will create a special path, or ",(0,o.yg)("strong",{parentName:"p"},"pattern"),", in our application. If we were to host this application at ",(0,o.yg)("em",{parentName:"p"},"old.learnhowtoprogram.com"),", we'd have the following route because of the ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method in our ",(0,o.yg)("inlineCode",{parentName:"p"},"Home")," controller:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"old.learnhowtoprogram.com/home/hello\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("strong",{parentName:"p"},"path")," is the portion appended to the end of the homepage URL:"),(0,o.yg)("pre",null,"/home/hello"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"The first part of the path ",(0,o.yg)("inlineCode",{parentName:"p"},"/home")," corresponds to the name of our controller ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"The second part ",(0,o.yg)("inlineCode",{parentName:"p"},"/hello")," corresponds to the name of our route method ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If we were to host our application at ",(0,o.yg)("em",{parentName:"p"},"old.learnhowtoprogram.com"),", the ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method in ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," will run when a user navigates to ",(0,o.yg)("em",{parentName:"p"},"old.learnhowtoprogram.com/home/hello"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If we revisit our ",(0,o.yg)("inlineCode",{parentName:"p"},"/home/hello")," route, we see it returns the string ",(0,o.yg)("inlineCode",{parentName:"p"},'"Hello friend!"'),". This is called the ",(0,o.yg)("strong",{parentName:"p"},"action"),", because it defines what the site will do when a client requests this particular ",(0,o.yg)("strong",{parentName:"p"},"path"),"."))),(0,o.yg)("h2",{id:"invoking-routes"},"Invoking Routes"),(0,o.yg)("hr",null),(0,o.yg)("p",null,"We can launch our application by running ",(0,o.yg)("inlineCode",{parentName:"p"},"dotnet run")," in the production directory of our project: ",(0,o.yg)("inlineCode",{parentName:"p"},"FriendLetter.Solution/FriendLetter"),". If the project doesn't have ",(0,o.yg)("inlineCode",{parentName:"p"},"obj")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"bin")," subdirectories, these will be created in the process of running the app with ",(0,o.yg)("inlineCode",{parentName:"p"},"dotnet run"),", since that command restores and builds the project before running it."),(0,o.yg)("p",null,"Now we can navigate to the following URL in the browser:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"http://localhost:5000/home/hello\n")),(0,o.yg)("p",null,"The message ",(0,o.yg)("inlineCode",{parentName:"p"},'"Hello friend!"')," will appear. Let's discuss exactly what's happening here."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"When a ",(0,o.yg)("strong",{parentName:"p"},"client")," like a web browser makes a ",(0,o.yg)("strong",{parentName:"p"},"request")," to our server, it must include the URL it's requesting. In the example above, the URL contains a ",(0,o.yg)("inlineCode",{parentName:"p"},"/home/hello")," ",(0,o.yg)("strong",{parentName:"p"},"path"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Our server looks at the ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController")," because it matches the first ",(0,o.yg)("inlineCode",{parentName:"p"},"/home")," portion of the URL path.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"In order to find the more specific ",(0,o.yg)("inlineCode",{parentName:"p"},"/home/hello")," data, our server looks for a ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method in the ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"The server provides our client with a ",(0,o.yg)("strong",{parentName:"p"},"response"),". In this case, our ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello()")," method returns the string ",(0,o.yg)("inlineCode",{parentName:"p"},'"Hello friend!"'),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Our client receives the response and renders the resources in the browser. We see ",(0,o.yg)("inlineCode",{parentName:"p"},'"Hello friend!"')," appear on the page."))),(0,o.yg)("h2",{id:"more-routes"},"More Routes"),(0,o.yg)("hr",null),(0,o.yg)("p",null,"Let\u2019s add another route to a page that says ",(0,o.yg)("inlineCode",{parentName:"p"},'"Goodbye friend!"'),". Open ",(0,o.yg)("inlineCode",{parentName:"p"},"HomeController.cs")," and add the following:"),(0,o.yg)("div",{class:"filename"},"FriendLetter/Controllers/HomeController.cs"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.AspNetCore.Mvc;\n\nnamespace FriendLetter.Controllers\n{\n  public class HomeController : Controller\n  {\n\n    public string Hello() { return "Hello friend!"; }\n\n    public string Goodbye() { return "Goodbye friend."; }\n\n  }\n}\n')),(0,o.yg)("p",null,"Now we can navigate to:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"localhost:5000/home/goodbye\n")),(0,o.yg)("p",null,"This time we should see ",(0,o.yg)("inlineCode",{parentName:"p"},'"Goodbye friend."')),(0,o.yg)("p",null,"In the next lesson, we'll discuss how to further customize the URL paths that match up with specific routes."))}d.isMDXComponent=!0},15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach(function(n){o(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef(function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),g=o,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))});function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);
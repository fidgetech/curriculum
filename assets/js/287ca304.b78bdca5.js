"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[83103],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>u});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef(function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),y=c(n),d=r,u=y["".concat(i,".").concat(d)]||y[d]||m[d]||o;return n?a.createElement(u,s(s({ref:t},p),{},{components:n})):a.createElement(u,s({ref:t},p))});function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[y]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},89345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(58168),r=(n(96540),n(15680));const o={title:"\ud83d\udcd3 4.2.2.5 Styling React: CSS Objects",day:"tuesday",id:"4-2-2-5-styling-react-css-objects",hide_table_of_contents:!0},s=void 0,l={unversionedId:"react/react-fundamentals/4-2-2-5-styling-react-css-objects",id:"react/react-fundamentals/4-2-2-5-styling-react-css-objects",title:"\ud83d\udcd3 4.2.2.5 Styling React: CSS Objects",description:"There are many approaches to styling a React application ranging from standard CSS to CSS objects to the styled-components library. We will cover several different approaches throughout this course, starting with CSS objects and inline styles in this lesson.",source:"@site/docs/4_react/2_react-fundamentals/AZ-4-2-2-5-styling-react-css-objects.md",sourceDirName:"4_react/2_react-fundamentals",slug:"/react/react-fundamentals/4-2-2-5-styling-react-css-objects",permalink:"/v1.2/react/react-fundamentals/4-2-2-5-styling-react-css-objects",draft:!1,tags:[],version:"current",frontMatter:{title:"\ud83d\udcd3 4.2.2.5 Styling React: CSS Objects",day:"tuesday",id:"4-2-2-5-styling-react-css-objects",hide_table_of_contents:!0},sidebar:"react",previous:{title:"\ud83d\udcd3 4.2.2.4 Passing Data Via Callbacks",permalink:"/v1.2/react/react-fundamentals/4-2-2-4-passing-data-via-callbacks"},next:{title:"\u270f\ufe0f 4.2.3.1 Help Queue, Merch Site, Event Logger",permalink:"/v1.2/react/react-fundamentals/4-2-3-1-help-queue-merch-site-event-logger"}},i={},c=[{value:"Inline Styles with Style Objects",id:"inline-styles-with-style-objects",level:3}],p={toc:c},y="wrapper";function m(e){let{components:t,...n}=e;return(0,r.yg)(y,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"There are many approaches to styling a React application ranging from standard CSS to CSS objects to the ",(0,r.yg)("inlineCode",{parentName:"p"},"styled-components")," library. We will cover several different approaches throughout this course, starting with CSS objects and inline styles in this lesson."),(0,r.yg)("h3",{id:"inline-styles-with-style-objects"},"Inline Styles with Style Objects"),(0,r.yg)("p",null,"React advocates that an application should be composed of small, self-contained, reusable chunks of code called components."),(0,r.yg)("p",null,"To make our components fully modular, many React developers believe that a component should contain everything it needs, including CSS. According to proponents of this approach, we should use ",(0,r.yg)("strong",{parentName:"p"},"inline styles")," with ",(0,r.yg)("strong",{parentName:"p"},"CSS objects"),". For demonstration purposes, we'll pretend we have a component called ",(0,r.yg)("inlineCode",{parentName:"p"},"MyStyledComponent")," that looks like this:"),(0,r.yg)("div",{class:"filename"},"MyStyledComponent.js"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\n\nfunction MyStyledComponent(props) {\n  return (\n    <div>\n      <h1>Hey, I'm a component</h1>\n      <h2>But there's something different about me...</h2>\n      <h3>Unlike other components you have worked with thus far....</h3>\n      <h4>I also include custom CSS styles!</h4>\n      <p>Pretty cool, right</p>\n    </div>\n  );\n}\n\nexport default MyStyledComponent;\n")),(0,r.yg)("p",null,"This is how ",(0,r.yg)("inlineCode",{parentName:"p"},"MyStyledComponent")," looks in browser:"),(0,r.yg)("img",{src:"/images/Intermediate%20JavaScript/React/style-free-component.png",alt:"style-free example component.",width:"100%"}),(0,r.yg)("p",null,"Let's add styling. We can declare a CSS object right in this component's file:"),(0,r.yg)("div",{class:"filename"},"MyStyledComponent.js"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nfunction MyStyledComponent(props) {\n  const myStyledComponentStyles = {\n    backgroundColor: '#ecf0f1',\n    fontFamily: 'sans-serif',\n    paddingTop: '50px'\n  }\n  return (\n    <div style={myStyledComponentStyles}>\n      <h1>Hey, I'm a component</h1>\n      <h2>But there's something different about me...</h2>\n      <h3>Unlike other components you have worked with thus far....</h3>\n      <h4>I also include custom CSS styles!</h4>\n      <p>Pretty cool, right</p>\n    </div>\n  );\n}\n\nexport default MyStyledComponent;\n")),(0,r.yg)("p",null,"Here, we define an object called ",(0,r.yg)("inlineCode",{parentName:"p"},"myStyledComponentStyles"),". It contains a series of CSS rules in an object literal. This is a ",(0,r.yg)("strong",{parentName:"p"},"CSS object"),"."),(0,r.yg)("p",null,"In order to actually use this CSS object in our JSX, we add a ",(0,r.yg)("inlineCode",{parentName:"p"},"style")," tag that evaluates to a JSX expression with the ",(0,r.yg)("inlineCode",{parentName:"p"},"myStyledComponentStyles")," variable."),(0,r.yg)("p",null,"Whenever we use the ",(0,r.yg)("inlineCode",{parentName:"p"},"style")," attribute directly on an HTML or JSX element, it's considered an ",(0,r.yg)("strong",{parentName:"p"},"inline style")," because the style information is attached directly to the code. "),(0,r.yg)("p",null,"Our component now looks like this in the browser:"),(0,r.yg)("img",{src:"/images/Intermediate%20JavaScript/React/inline-styles-in-action.png",alt:"example component with inline styles",width:"100%"}),(0,r.yg)("p",null,"The syntax in these CSS objects differs from the CSS syntax we've used in the past. Here are the differences;"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"CSS properties that use multiple words are written in camelCase instead of using hyphens. For example, we say ",(0,r.yg)("inlineCode",{parentName:"p"},"backgroundColor")," instead ",(0,r.yg)("inlineCode",{parentName:"p"},"background-color"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The values corresponding to each property are strings. For instance, we say ",(0,r.yg)("inlineCode",{parentName:"p"},"'sans-serif'")," instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"sans-serif"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Each CSS rule in the object is separated by a comma since this is an object literal.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Because the term ",(0,r.yg)("inlineCode",{parentName:"p"},"class")," is reserved in JSX, we have to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"className")," property when we want to add a specific CSS class to an element in a component. For example, we'd do the following: ",(0,r.yg)("inlineCode",{parentName:"p"},"<div className='example-class'>")," instead of this: ",(0,r.yg)("inlineCode",{parentName:"p"},"<div class='example class'>"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"We can also omit the ",(0,r.yg)("inlineCode",{parentName:"p"},"px")," suffix from any pixel-related values."))),(0,r.yg)("p",null,"We will learn other approaches in future lessons. For now, we will continue to keep our components modular and use CSS objects with inline styles to style our applications."))}m.isMDXComponent=!0}}]);
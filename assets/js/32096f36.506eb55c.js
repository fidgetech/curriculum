"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[71942],{1036:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=a(58168),r=(a(96540),a(15680));const i={title:"\ud83d\udcd3 3.0.0.17 Iterators: Foreach and For Loops",day:"weekend",id:"3-0-0-17-iterators-foreach-and-for-loops",hide_table_of_contents:!0},o=void 0,l={unversionedId:"c-and-net/lessons-6-18-data-types-and-variables/3-0-0-17-iterators-foreach-and-for-loops",id:"version-1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-17-iterators-foreach-and-for-loops",title:"\ud83d\udcd3 3.0.0.17 Iterators: Foreach and For Loops",description:"In Intro, we typically used two types of JavaScript loops: for and forEach(). forEach() loops iterate through each item in an array whereas for loops are more manual where we have to define how and when the loop starts and stops.",source:"@site/versioned_docs/version-1.1/3_c-and-net/0_lessons-6-18-data-types-and-variables/AL-3-0-0-17-iterators-foreach-and-for-loops.md",sourceDirName:"3_c-and-net/0_lessons-6-18-data-types-and-variables",slug:"/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-17-iterators-foreach-and-for-loops",permalink:"/v1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-17-iterators-foreach-and-for-loops",draft:!1,tags:[],version:"1.1",frontMatter:{title:"\ud83d\udcd3 3.0.0.17 Iterators: Foreach and For Loops",day:"weekend",id:"3-0-0-17-iterators-foreach-and-for-loops",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.0.0.16 Dictionaries",permalink:"/v1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-16-dictionaries"},next:{title:"\ud83d\udcd3 3.0.0.18 Type Casting",permalink:"/v1.1/c-and-net/lessons-6-18-data-types-and-variables/3-0-0-18-type-casting"}},s={},p=[{value:"Foreach Loops",id:"foreach-loops",level:2},{value:"Arrays",id:"arrays",level:3},{value:"Lists",id:"lists",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Using For Loops",id:"using-for-loops",level:2},{value:"Arrays",id:"arrays-1",level:3},{value:"Lists",id:"lists-1",level:3},{value:"Dictionaries",id:"dictionaries-1",level:3}],d={toc:p},c="wrapper";function y(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"In Intro, we typically used two types of JavaScript loops: ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"forEach()"),". ",(0,r.yg)("inlineCode",{parentName:"p"},"forEach()")," loops iterate through each item in an array whereas ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," loops are more manual where we have to define how and when the loop starts and stops."),(0,r.yg)("p",null,"C# also features both ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"foreach")," loops, although the syntax ",(0,r.yg)("em",{parentName:"p"},"does")," differ. This lesson will walk through both types of iterators."),(0,r.yg)("h2",{id:"foreach-loops"},"Foreach Loops"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"Foreach loops cycle through an array and pinpoint each item. In JavaScript, we used foreach loops like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'const theEntireArray = ["zero index", "first index", "second index"];\ntheEntireArray.forEach(function(individualEntry){\n  console.log(individualEntry);\n});\n')),(0,r.yg)("p",null,"However, doing the same thing in C# looks markedly different. We'll start with arrays, and then look at lists and dictionaries. "),(0,r.yg)("h3",{id:"arrays"},"Arrays"),(0,r.yg)("p",null,"First, defining a similar array in the REPL looks like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'> string[] theEntireArray = {"zero index", "first index", "second index"};\n')),(0,r.yg)("p",null,"To loop through this array and print each entry to the console, we'd use the following code. Go ahead and copy/paste it into the REPL."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"foreach (string individualEntry in theEntireArray)\n{\n  Console.WriteLine(individualEntry);\n}\n")),(0,r.yg)("p",null,"The line ",(0,r.yg)("inlineCode",{parentName:"p"},"foreach (string individualEntry in theEntireArray)"),' can be read as "for each element in ',(0,r.yg)("inlineCode",{parentName:"p"},"theEntireArray"),", name it ",(0,r.yg)("inlineCode",{parentName:"p"},"individualEntry"),", then run the line of code between the curly braces.\" In this case, we're printing each item in ",(0,r.yg)("inlineCode",{parentName:"p"},"theEntireArray")," to the console."),(0,r.yg)("p",null,"Note that we also need to include the data type for the new variable we're creating in the loop: ",(0,r.yg)("inlineCode",{parentName:"p"},"string individualEntry"),"."),(0,r.yg)("p",null,"When we run this loop in the REPL, it prints each individual string entry in the array:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"zero index\nfirst index\nsecond index\n")),(0,r.yg)("h3",{id:"lists"},"Lists"),(0,r.yg)("p",null,"Looping through a list with foreach is almost the exact same as with an array. The only difference is that we're using a List. Copy/paste the following code into the ",(0,r.yg)("inlineCode",{parentName:"p"},"dotnet-script")," REPL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'List<string> groceryList = new List<string> { "spaghetti", "tomatoes", "basil", "meatballs" };\nforeach (string item in groceryList)\n{\n  Console.WriteLine(item);\n}\n')),(0,r.yg)("p",null,"We should see this printed in the console:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"spaghetti\ntomatoes\nbasil\nmeatballs\n")),(0,r.yg)("h3",{id:"dictionaries"},"Dictionaries"),(0,r.yg)("p",null,"We can also loop through a dictionary with foreach, though we need to incorporate a new class called ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyValuePair<TKey,TValue>")," to represent each key-value pair within the dictionary."),(0,r.yg)("p",null,"Copy/paste the following code into the ",(0,r.yg)("inlineCode",{parentName:"p"},"dotnet-script")," REPL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'Dictionary<string, int> cupcakeOrder = new Dictionary<string, int>() { {"vanilla", 12}, {"chocolate", 24}, {"raspberry", 6}, {"caramel apple", 36} };\nforeach (KeyValuePair<string, int> cupcake in cupcakeOrder)\n{\n  Console.WriteLine($"{cupcake.Key}: {cupcake.Value}");\n}\n')),(0,r.yg)("p",null,"We should see this printed in the console:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"vanilla: 12\nchocolate: 24\nraspberry: 6\ncaramel apple: 36\n")),(0,r.yg)("p",null,"Similar to dictionaries, ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyValuePair<TKey,TValue>")," requires that we specify a data type for the key and the value. "),(0,r.yg)("p",null,"Within the loop, notice that we access the key and value of each ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyValuePair<TKey,TValue>")," through two properties: ",(0,r.yg)("inlineCode",{parentName:"p"},"Key")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Value"),". Also notice that we're using string interpolation to put our variables directly into a string: ",(0,r.yg)("inlineCode",{parentName:"p"},'$"{cupcake.Key}: {cupcake.Value}"'),"."),(0,r.yg)("p",null,"Visit the docs to learn more about ",(0,r.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.keyvaluepair-2?view=net-6.0"},"the ",(0,r.yg)("inlineCode",{parentName:"a"},"KeyValuePair<TKey,TValue>")," class"),"."),(0,r.yg)("h2",{id:"using-for-loops"},"Using For Loops"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"For each loops are great when we want to do something to each element of a collection. But sometimes we only want to do something until a condition is met. For that, we can use a ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," loop."),(0,r.yg)("p",null,"Let's refactor each of our previous examples to use a for loop."),(0,r.yg)("h3",{id:"arrays-1"},"Arrays"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'string[] theEntireArray = {"zero index", "first index", "second index"};\nfor (int index = 0; index < theEntireArray.Length; index++)\n{\n  Console.WriteLine($"{index}: {theEntireArray[index]}");\n}\n')),(0,r.yg)("p",null,"Here's how the ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," loop works:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," statement here takes three parameters: ",(0,r.yg)("strong",{parentName:"p"},"initialization"),", ",(0,r.yg)("strong",{parentName:"p"},"condition"),", and ",(0,r.yg)("strong",{parentName:"p"},"final expression"),". Each is separated by a semicolon ",(0,r.yg)("inlineCode",{parentName:"p"},";"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The ",(0,r.yg)("strong",{parentName:"p"},"initialization")," parameter (",(0,r.yg)("inlineCode",{parentName:"p"},"int index = 0"),") creates an ",(0,r.yg)("inlineCode",{parentName:"p"},"int")," called ",(0,r.yg)("inlineCode",{parentName:"p"},"index")," that starts at zero. This states that the first time the loop runs is actually the 0th time. Initializing ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," loops at 0 is a common practice, but they can theoretically be initialized at any number.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The ",(0,r.yg)("strong",{parentName:"p"},"condition")," parameter (",(0,r.yg)("inlineCode",{parentName:"p"},"index < theEntireArray.Length"),") tells the loop when it should stop running. To determine this we're making use of our array's ",(0,r.yg)("inlineCode",{parentName:"p"},"Length")," property, which returns the number of elements in the array. For the condition parameter, we've instructed our loop to halt when ",(0,r.yg)("inlineCode",{parentName:"p"},"index")," is no longer less than ",(0,r.yg)("inlineCode",{parentName:"p"},"theEntireArray.Length"),". Keep in mind that ",(0,r.yg)("inlineCode",{parentName:"p"},"theEntireArray.Length")," evaluates to ",(0,r.yg)("inlineCode",{parentName:"p"},"3"),", but the last ",(0,r.yg)("em",{parentName:"p"},"index")," of ",(0,r.yg)("inlineCode",{parentName:"p"},"theEntireArray")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"2"),", because indexes begin at ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The ",(0,r.yg)("strong",{parentName:"p"},"final expression")," parameter (",(0,r.yg)("inlineCode",{parentName:"p"},"index++ "),") manipulates the variable that keeps track of where we are in the loop. Here we use the increment operator ",(0,r.yg)("inlineCode",{parentName:"p"},"++")," to add ",(0,r.yg)("inlineCode",{parentName:"p"},"1")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"index")," each time we go through the loop.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Within the loop, we include the line ",(0,r.yg)("inlineCode",{parentName:"p"},'Console.WriteLine($"{index}: {theEntireArray[index]}");'),". On each loop through, we print the current ",(0,r.yg)("inlineCode",{parentName:"p"},"index")," as well as the element in ",(0,r.yg)("inlineCode",{parentName:"p"},"theEntireArray")," at the current ",(0,r.yg)("inlineCode",{parentName:"p"},"index"),"."))),(0,r.yg)("p",null,"We should see the following output in the REPL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"0: zero index\n1: first index\n2: second index\n")),(0,r.yg)("h3",{id:"lists-1"},"Lists"),(0,r.yg)("p",null,"Looping through a list with a for loop is almost the exact same as with an array. The two differences are that we're using a list (instead of an array) and lists have a ",(0,r.yg)("inlineCode",{parentName:"p"},"Count")," property that returns the number of elements within it (as opposed to a ",(0,r.yg)("inlineCode",{parentName:"p"},"Length")," property). Copy/paste the following code into the ",(0,r.yg)("inlineCode",{parentName:"p"},"dotnet-script")," REPL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'List<string> groceryList = new List<string> { "spaghetti", "tomatoes", "basil", "meatballs" };\nfor (int index = 0; index < groceryList.Count; index++)\n{\n  Console.WriteLine($"{index}: {groceryList[index]}");\n}\n')),(0,r.yg)("p",null,"We should see this printed in our console:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"0: spaghetti\n1: tomatoes\n2: basil\n3: meatballs\n")),(0,r.yg)("h3",{id:"dictionaries-1"},"Dictionaries"),(0,r.yg)("p",null,"If we want to loop through a dictionary with a for loop, we'll need to use the dictionary instance method ",(0,r.yg)("inlineCode",{parentName:"p"},"ElementAt()")," to locate the key-value pair by an index value. Let's take a look at the code first. Copy/paste the following code into the ",(0,r.yg)("inlineCode",{parentName:"p"},"dotnet-script")," REPL to see how it works:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'Dictionary<string, int> cupcakeOrder = new Dictionary<string, int>() { {"vanilla", 12}, {"chocolate", 24}, {"raspberry", 6}, {"caramel apple", 36} };\nfor (int index = 0; index < cupcakeOrder.Count; index++)\n{\n  KeyValuePair<string, int> cupcake = cupcakeOrder.ElementAt(index);\n  Console.WriteLine($"{index}: {cupcake.Value} {cupcake.Key} cupcakes");\n}\n')),(0,r.yg)("p",null,"In each iteration of the loop, we use the ",(0,r.yg)("inlineCode",{parentName:"p"},"index")," variable in order to locate a key-value pair within the dictionary using the ",(0,r.yg)("inlineCode",{parentName:"p"},"ElementAt()")," instance method. The key-value pair is then saved to the ",(0,r.yg)("inlineCode",{parentName:"p"},"cupcake")," variable as an instance of the ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyValuePair<TKey,TValue>")," class. "),(0,r.yg)("p",null,"Then, we access the ",(0,r.yg)("inlineCode",{parentName:"p"},"Value")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Key")," properties (of the ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyValuePair<TKey,TValue>")," class) to display each cupcake's flavor and the amount that we want to order. We should see this printed in the console:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"0: 12 vanilla cupcakes\n1: 24 chocolate cupcakes\n2: 6 raspberry cupcakes\n3: 36 caramel apple cupcakes\n")),(0,r.yg)("p",null,"And with that, we've covered the basics of looping with for and foreach loops for arrays, lists, and dictionaries."))}y.isMDXComponent=!0},15680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>g});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach(function(n){r(e,n,a[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))})}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef(function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,g=c["".concat(s,".").concat(h)]||c[h]||y[h]||i;return a?t.createElement(g,o(o({ref:n},d),{},{components:a})):t.createElement(g,o({ref:n},d))});function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);
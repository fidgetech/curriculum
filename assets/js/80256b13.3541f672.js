"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[93872],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef(function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||a;return t?i.createElement(m,o(o({ref:n},c),{},{components:t})):i.createElement(m,o({ref:n},c))});function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},59e3:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=t(58168),r=(t(96540),t(15680));const a={title:"\ud83d\udcd3 3.2.0.12 Creating and Using Views",day:"weekend",id:"3-2-0-12-creating-and-using-views",hide_table_of_contents:!0},o=void 0,l={unversionedId:"c-and-net/basic-web-applications/3-2-0-12-creating-and-using-views",id:"c-and-net/basic-web-applications/3-2-0-12-creating-and-using-views",title:"\ud83d\udcd3 3.2.0.12 Creating and Using Views",description:"We've set up a few routes that return strings. However, that's not very helpful for building a functional site. Let's add HTML to our site by using views \u2014 the \"V\" in MVC.",source:"@site/docs/3_c-and-net/2_basic-web-applications/AL-3-2-0-12-creating-and-using-views.md",sourceDirName:"3_c-and-net/2_basic-web-applications",slug:"/c-and-net/basic-web-applications/3-2-0-12-creating-and-using-views",permalink:"/v1.2/c-and-net/basic-web-applications/3-2-0-12-creating-and-using-views",draft:!1,tags:[],version:"current",frontMatter:{title:"\ud83d\udcd3 3.2.0.12 Creating and Using Views",day:"weekend",id:"3-2-0-12-creating-and-using-views",hide_table_of_contents:!0},sidebar:"c-and-net",previous:{title:"\ud83d\udcd3 3.2.0.11 Custom URL Paths",permalink:"/v1.2/c-and-net/basic-web-applications/3-2-0-11-custom-url-paths"},next:{title:"\ud83d\udcd3 3.2.0.13 Creating a Basic Model",permalink:"/v1.2/c-and-net/basic-web-applications/3-2-0-13-creating-a-basic-model"}},s={},p=[{value:"View File Structure",id:"view-file-structure",level:2},{value:"Writing a View",id:"writing-a-view",level:2},{value:"Invoking Views",id:"invoking-views",level:2},{value:"Naming Convention Functionality",id:"naming-convention-functionality",level:3}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,i.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"We've set up a few routes that return strings. However, that's not very helpful for building a functional site. Let's add HTML to our site by using ",(0,r.yg)("strong",{parentName:"p"},"views"),' \u2014 the "V" in MVC.'),(0,r.yg)("h2",{id:"view-file-structure"},"View File Structure"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"In MVC applications, views are ",(0,r.yg)("inlineCode",{parentName:"p"},".cshtml")," files instead of ",(0,r.yg)("inlineCode",{parentName:"p"},".html")," files. ",(0,r.yg)("inlineCode",{parentName:"p"},".cshtml")," files support both plain old HTML and inline C# logic. Views always reside in a ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," subdirectory of the production project. If you haven't already, go ahead and add a ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," subdirectory in ",(0,r.yg)("inlineCode",{parentName:"p"},"FriendLetter")," now."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," directory is further divided into subdirectories, one for each controller. We only have a ",(0,r.yg)("inlineCode",{parentName:"p"},"HomeController")," so we'll create a ",(0,r.yg)("inlineCode",{parentName:"p"},"Home")," subdirectory in ",(0,r.yg)("inlineCode",{parentName:"p"},"Views"),". In ",(0,r.yg)("inlineCode",{parentName:"p"},"Views/Home")," we'll create our first view file:  ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter.cshtml"),". This name matches our ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," route exactly."),(0,r.yg)("p",null,"The resulting structure for our ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," should look like this:"),(0,r.yg)("pre",null,"FriendLetter.Solution \u2514\u2500\u2500 FriendLetter \u2514\u2500\u2500 Views \u2514\u2500\u2500 Home \u2514\u2500\u2500 Letter.cshtml"),(0,r.yg)("h2",{id:"writing-a-view"},"Writing a View"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"Let's add HTML to our view:"),(0,r.yg)("div",{class:"filename"},"FriendLetter/Views/Home/Letter.cshtml"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello Friend!</title>\n    <link \n      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" \n      rel="stylesheet" \n      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" \n      crossorigin="anonymous">\n    <meta charset=\'utf-8\'>\n  </head>\n  <body>\n    <h1>Hello From Afar</h1>\n    <p>Dear Friend,</p>\n    <p>How are you? I hope that you are having a nice weekend. I\'m vacationing in Iceland while I learn programming! </p>\n    <p>Friend, you would not believe how cold it is here. I should have gone to Hawaii instead.</p>\n    <p>But I like programming a lot, so I\'ve got that going for me. </p>\n    <p>Looking forward to seeing you soon. I\'ll bring you back a souvenir. </p>\n    <p>Cheers,</p>\n    <p>Travel Enthusiast Jane</p>\n  </body>\n</html>\n')),(0,r.yg)("p",null,"Now we need to update our controller code for the ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," route to render the ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter.cshtml")," view."),(0,r.yg)("div",{class:"filename"},"FriendLetter/Controllers/HomeController.cs"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.AspNetCore.Mvc;\n\nnamespace FriendLetter.Controllers\n{\n  public class HomeController : Controller\n  {\n\n    [Route("/hello")]\n    public string Hello() { return "Hello friend!"; }\n\n    [Route("/goodbye")]\n    public string Goodbye() { return "Goodbye friend."; }\n\n    [Route("/")]\n    // Notice the changes below!\n    public ActionResult Letter() { return View(); }\n\n  }\n}\n')),(0,r.yg)("p",null,"We just made several changes to our ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," route:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The return type of our ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," method is now an ",(0,r.yg)("inlineCode",{parentName:"p"},"ActionResult"),", not a ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),". This is a built-in MVC class that handles rendering views.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Our method returns another method called ",(0,r.yg)("inlineCode",{parentName:"p"},"View()"),". This is a built-in method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"Microsoft.AspNetCore.Mvc")," namespace. When our route is invoked, it will return a view. "))),(0,r.yg)("h2",{id:"invoking-views"},"Invoking Views"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"If we save, build and run our application, we'll see our HTML-formatted letter appear at ",(0,r.yg)("em",{parentName:"p"},"localhost:5000"),". But how does ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," know ",(0,r.yg)("em",{parentName:"p"},"which")," view in the ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," directory to render?"),(0,r.yg)("h3",{id:"naming-convention-functionality"},"Naming Convention Functionality"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"View()")," method has built-in functionality to locate views by name. Here's how it works:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Because views should ",(0,r.yg)("strong",{parentName:"p"},"always")," reside in a ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," directory, ",(0,r.yg)("inlineCode",{parentName:"p"},"View()")," first locates the ",(0,r.yg)("inlineCode",{parentName:"p"},"Views")," directory in the production project.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Then the method looks for a subdirectory with a name that matches the controller name. Our ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," route is in a ",(0,r.yg)("inlineCode",{parentName:"p"},"HomeController")," so it looks for the subdirectory ",(0,r.yg)("inlineCode",{parentName:"p"},"Home"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Once in the ",(0,r.yg)("inlineCode",{parentName:"p"},"Home")," directory, the method looks for a file that corresponds with the route itself. In this case, it's looking for ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()"),". Our ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter.cshtml")," file name matches the name of this route so the ",(0,r.yg)("inlineCode",{parentName:"p"},"View()")," method returns the HTML in this file."))),(0,r.yg)("p",null,"Following correct naming convention is essential here. If any of our directories or files are incorrectly named, the ",(0,r.yg)("inlineCode",{parentName:"p"},"View()")," method won't be able to render the right HTML."),(0,r.yg)("p",null,"Before we move on, let's discuss an important clarification in these naming conventions: ",(0,r.yg)("strong",{parentName:"p"},"the ",(0,r.yg)("inlineCode",{parentName:"strong"},"View()")," method only cares about the name of the method that invokes it.")," In the example above, the method ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter()")," invokes ",(0,r.yg)("inlineCode",{parentName:"p"},"View()"),", so ",(0,r.yg)("inlineCode",{parentName:"p"},"View()")," looks for ",(0,r.yg)("inlineCode",{parentName:"p"},"Letter.cshtml"),"."),(0,r.yg)("p",null,"In other words, ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"View()")," does not care about the route decorator.")," The route decorator is simply a convenience so users can more easily access a route. This means that ",(0,r.yg)("inlineCode",{parentName:"p"},".cshtml")," files should never be named based on route decorators. If they are, ",(0,r.yg)("inlineCode",{parentName:"p"},"View()")," won't be able to find them."),(0,r.yg)("p",null,"In the next lesson, we'll create our first model. Then, we'll use a markup syntax called Razor to dynamically render information from our model."))}u.isMDXComponent=!0}}]);
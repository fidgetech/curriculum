"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[16904],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>f});var o=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef(function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=l(n),g=r,f=p["".concat(s,".").concat(g)]||p[g]||u[g]||a;return n?o.createElement(f,i(i({ref:t},m),{},{components:n})):o.createElement(f,i({ref:t},m))});function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},69569:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=n(58168),r=(n(96540),n(15680));const a={title:"\ud83d\udcd3 4.1.0.2 Introduction to Functional Programming",day:"weekend",id:"4-1-0-2-introduction-to-functional-programming",hide_table_of_contents:!0},i=void 0,c={unversionedId:"react/functional-programming-with-javascript/4-1-0-2-introduction-to-functional-programming",id:"version-1.1/react/functional-programming-with-javascript/4-1-0-2-introduction-to-functional-programming",title:"\ud83d\udcd3 4.1.0.2 Introduction to Functional Programming",description:"Up to this point, we have mostly focused on object-oriented programming. We've built objects that store information and have methods attached to them. Object-oriented programming relies on techniques like inheritance and encapsulation.",source:"@site/versioned_docs/version-1.1/4_react/1_functional-programming-with-javascript/AB-4-1-0-2-introduction-to-functional-programming.md",sourceDirName:"4_react/1_functional-programming-with-javascript",slug:"/react/functional-programming-with-javascript/4-1-0-2-introduction-to-functional-programming",permalink:"/v1.1/react/functional-programming-with-javascript/4-1-0-2-introduction-to-functional-programming",draft:!1,tags:[],version:"1.1",frontMatter:{title:"\ud83d\udcd3 4.1.0.2 Introduction to Functional Programming",day:"weekend",id:"4-1-0-2-introduction-to-functional-programming",hide_table_of_contents:!0},sidebar:"react",previous:{title:"\ud83d\udcd3 4.1.0.1 Functional Programming with JavaScript Objectives",permalink:"/v1.1/react/functional-programming-with-javascript/4-1-0-1-functional-programming-with-javascript-objectives"},next:{title:"\ud83d\udcd3 4.1.0.3 Testing Functional Code",permalink:"/v1.1/react/functional-programming-with-javascript/4-1-0-3-testing-functional-code"}},s={},l=[],m={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,o.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Up to this point, we have mostly focused on object-oriented programming. We've built objects that store information and have methods attached to them. Object-oriented programming relies on techniques like ",(0,r.yg)("strong",{parentName:"p"},"inheritance")," and ",(0,r.yg)("strong",{parentName:"p"},"encapsulation"),"."),(0,r.yg)("p",null,"Functional programming is a completely different paradigm. In general, the goal of a functional program is to be ",(0,r.yg)("strong",{parentName:"p"},"stateless"),", which means we can no longer store information in objects. Functional programming focuses on what objects ",(0,r.yg)("em",{parentName:"p"},"do"),", not on what they ",(0,r.yg)("em",{parentName:"p"},"are"),". Instead of storing information in objects, we will pass information between functions. We will no longer ",(0,r.yg)("strong",{parentName:"p"},"mutate")," state \u2014 that means we won't even reassign values to variables. In other words, no more ",(0,r.yg)("inlineCode",{parentName:"p"},"let"),", only ",(0,r.yg)("inlineCode",{parentName:"p"},"const"),"."),(0,r.yg)("p",null,"Object-oriented programming focuses on objects themselves while functional programming is focused on functions. We've used OOP in very concrete ways; for instance, a dog barks or a player stores a score."),(0,r.yg)("p",null,"In functional programming, our goal is to make our functions more abstract. This can make functional programming harder to grasp at first. However, once a function is abstracted, we can use it with many different objects. While OOP uses inheritance to give many kinds of objects functionality, functional programming uses a technique called ",(0,r.yg)("strong",{parentName:"p"},"composition"),". We will learn more about composition and how it works in a future lesson."),(0,r.yg)("p",null,"While we will focus on functional programming techniques during this course section, both object-oriented and functional programming have their advantages and disadvantages. A good coder will incorporate both paradigms, even in the same application."))}u.isMDXComponent=!0}}]);